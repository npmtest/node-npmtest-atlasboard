{"/home/travis/build/npmtest/node-npmtest-atlasboard/test.js":"/* istanbul instrument in package npmtest_atlasboard */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-atlasboard/lib.npmtest_atlasboard.js":"/* istanbul instrument in package npmtest_atlasboard */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_atlasboard = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_atlasboard = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-atlasboard/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-atlasboard && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_atlasboard */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_atlasboard\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_atlasboard.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_atlasboard.rollup.js'] =\n            local.assetsDict['/assets.npmtest_atlasboard.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_atlasboard.__dirname + '/lib.npmtest_atlasboard.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/lib/atlasboard.js":"var path = require('path');\nvar express = require('express');\nvar packageDependencyManager = require('./package-dependency-manager');\nvar webServer = require('./webapp/server');\nvar jobInitialiser = require('./job-initialiser');\nvar socketIO = require('socket.io');\n\nmodule.exports = function (options, callback) {\n\n  options = options || {};\n\n  var packagesLocalFolder = path.join(process.cwd(), \"/packages\");\n  var packagesAtlasboardFolder = path.join(__dirname, \"../packages\");\n\n  var configPath = path.join(process.cwd(), \"/config\");\n\n  var runner = function (cb) {\n\n    //-----------------------------------\n    // Init web server\n    //-----------------------------------\n\n    var app = express();\n    var httpServer = webServer(app, {\n      port: options.port,\n      packageLocations: [packagesLocalFolder, packagesAtlasboardFolder]\n    });\n\n    console.log('\\n-------------------------------------------'.yellow);\n    console.log(('Atlasboard listening at port ' + options.port).gray);\n    console.log('-------------------------------------------'.yellow + '\\n');\n\n    //-----------------------------------\n    // Init socket.io server\n    //-----------------------------------\n\n    var io = socketIO.listen(httpServer, {\n      'log level': 2\n    });\n    var startTime = new Date().getTime();\n    io.on('connection', function (socket) {\n      socket.emit(\"serverinfo\", {startTime: startTime});\n    });\n\n    //-----------------------------------\n    // Init jobs / scheduler\n    //-----------------------------------\n\n    var jobOptions = {\n      packagesPath: [packagesLocalFolder, packagesAtlasboardFolder],\n      configPath: configPath,\n      filters: options.filters,\n      deps: {io: io, app: app}\n    };\n\n    jobInitialiser.init(jobOptions, cb);\n  };\n\n  if (options.install) {\n    console.log('Installing dependencies...'.gray);\n    packageDependencyManager.installDependencies([packagesLocalFolder], function (err) {\n      if (err) {\n        return callback(err);\n      }\n      console.log('done!'.green);\n      runner(callback);\n    });\n  } else {\n    runner(callback);\n  }\n\n};\n\n","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/lib/package-dependency-manager.js":"var async = require('async');\nvar fs = require('fs');\nvar path = require('path');\nvar _ = require ('underscore');\nvar readJson = require('read-package-json');\nvar semver = require('semver');\n\nmodule.exports.installDependencies = function (packagesPath, callback){\n\n  // Process all available package containers\n  async.map (packagesPath.filter(fs.existsSync), checkPackagesFolder, function(err, results){\n    if (err){ return callback(err); }\n    var paths = _.flatten(results);\n\n    async.eachSeries(paths, checkValidIfAtlasboardVersionForPackage, function (err){\n      if (err){\n        return callback(err);\n      }\n\n      async.eachSeries(paths, install, function (err){\n        callback(err);\n      });\n    });\n  });\n};\n\nvar atlasboardPackageJsonPath = path.join(__dirname, '../'); // in both test and production env will be located here.\n\n/**\n * Search for packages in the current folder\n */\n\nfunction checkPackagesFolder (packagesPath, cb){\n  fs.readdir(packagesPath, function(err, allPackagesDir){\n    if (err){ return cb(err); }\n\n    // convert to absolute path\n    allPackagesDir = allPackagesDir.map(function(partialDir){\n        return path.join(packagesPath, partialDir);});\n\n    // make sure we have package.json file\n    allPackagesDir = allPackagesDir.filter(function(dir){\n      return fs.statSync(dir).isDirectory() && fs.existsSync(dir + '/package.json');\n    });\n\n    cb(null, allPackagesDir);\n  });\n}\n\n/**\n * Install from package folder\n */\nfunction getValidPackageJSON (pathPackage, callback) {\n  readJson(pathPackage + '/package.json', callback);\n}\n\n/**\n * Install from package folder\n */\nfunction checkValidIfAtlasboardVersionForPackage (pathPackage, callback){\n  getValidPackageJSON(pathPackage, function(err, packageJson){\n    if (err){\n      return callback(err);\n    }\n\n    getValidPackageJSON(atlasboardPackageJsonPath, function(err, atlasboardPackageJson){\n      if (err) { return callback('package.json not found for atlasboard at ' + atlasboardPackageJsonPath); }\n\n      if (packageJson.engines && packageJson.engines.atlasboard){\n        var ok = semver.satisfies(atlasboardPackageJson.version, packageJson.engines.atlasboard);\n        var msg = 'Atlasboard version does not satisfy package dependencies at ' +\n                  pathPackage + '. Please consider updating your version of atlasboard. Version required: '+\n                  packageJson.engines.atlasboard + '. Atlasboard version: ' + atlasboardPackageJson.version;\n\n        callback(ok ? null : msg);\n      }\n      else {\n        callback(null); // not atlasboard reference in engines node\n      }\n    });\n  });\n}\n\n/**\n * Install from package folder\n */\nfunction install (pathPackageJson, callback){\n  var currPath = process.cwd(); // save current path\n  process.chdir(pathPackageJson);\n  \n  var isWindows = /^win/.test(process.platform);\n  var npmCommand = isWindows ? \"npm.cmd\" : \"npm\";\n\n  executeCommand(npmCommand, [\"install\", \"--production\", pathPackageJson], function(err, code){\n    if (err){\n      callback('Error installing dependencies for ' + pathPackageJson + '. err:' + err);\n    } else {\n      callback(code !== 0 ? 'error installing ' + pathPackageJson : null);\n    }\n  });\n\n  process.chdir(currPath); //restore path\n}\n\n/**\n * Executes a command in a childProcess\n */\n\nfunction executeCommand(cmd, args, callback) {\n  var childProcess = require('child_process');\n  var child = childProcess.spawn(cmd, args, {stdio: 'inherit'});\n  child.on('error', function (err) {\n    callback(err);\n  });\n  child.on('exit', function (code) {\n    callback(null, code);\n  });\n}","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/lib/webapp/server.js":"var http = require('http');\nvar path = require('path');\nvar methodOverride = require('method-override');\nvar morgan = require('morgan');\nvar compression = require('compression');\nvar bodyParser = require('body-parser');\nvar errorhandler = require('errorhandler');\nvar stylus = require('../stylus');\nvar express = require('express');\nvar routes = require('./routes.js');\nvar configManager = require('../config-manager');\n\nexports = module.exports = function (app, options) {\n\n  http.globalAgent.maxSockets = 100;\n\n  var atlasboardAssetsFolder = path.join(__dirname, \"../../assets\");\n  var localAssetsFolder = path.join(process.cwd(), \"assets\");\n\n  var compiledAssetsFolder = path.join(localAssetsFolder, 'compiled');\n\n  app.set('port', options.port);\n\n  app.use(morgan(configManager('logging').morgan));\n  app.use(compression());\n  app.use(bodyParser.urlencoded({extended: false}));\n  app.use(bodyParser.json());\n  app.use(methodOverride());\n  app.use(errorhandler());\n\n  app.use(stylus.getMiddleware({\n    src: atlasboardAssetsFolder,\n    dest: compiledAssetsFolder\n  }));\n\n  // -----------------------------------------\n  //  Expose both wallboard and Atlasboard assets.\n  //  Local wallboard assets take precedence\n  // -----------------------------------------\n  app.use(express.static(localAssetsFolder));\n  app.use(express.static(compiledAssetsFolder));\n  app.use(express.static(atlasboardAssetsFolder));\n\n  routes(app, options.packageLocations);\n\n  var httpServer = http.createServer(app).listen(app.get('port'));\n  if (!app.get('port')) {\n    throw ('Error binding http server to port ' + options.port);\n  }\n  return httpServer;\n};","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/lib/stylus.js":"var fs = require('fs');\nvar path = require('path');\nvar stylus = require('stylus');\nvar nib = require('nib');\nvar configManager = require('./config-manager');\nvar pathResolver = require('./path-resolver');\nvar debug = require('debug')('theming');\n\nexports = module.exports = (function () {\n\n  var themingConfig = configManager('theming');\n\n  var localTheme = pathResolver.fromLocalWallboard('themes', themingConfig.theme, 'variables.styl');\n  var atlasboardTheme = pathResolver.fromAtlasboard('../themes', themingConfig.theme, 'variables.styl');\n\n  var defaultTheme = pathResolver.fromAtlasboard('../assets', 'stylesheets', 'variables.styl');\n\n  function getStylusObject(str) {\n    var stylObj = stylus(str);\n    stylObj.import(defaultTheme); // import default core stylus variables\n\n    if (fs.existsSync(localTheme)) { // try importing local theme first\n      debug('importing local theme', localTheme);\n      stylObj.import(localTheme);\n    } else if (fs.existsSync(atlasboardTheme)) { // try importing from atlasboard's theme folder\n      debug('importing atlasboard theme', atlasboardTheme);\n      stylObj.import(atlasboardTheme);\n    }\n    return stylObj;\n  }\n\n  return {\n\n    /**\n     * Returns stylus middleware configured to use Atlasboard themes\n     * @param options\n     * @returns {*}\n     */\n\n    getMiddleware: function (options) {\n      return stylus.middleware({\n        src: options.src,\n        dest: options.dest,\n\n        compile: function (str, filePath) {\n          var stylObj = getStylusObject(str);\n          stylObj.set('filename', filePath)\n              .set('warn', false)\n              .set('compress', true)\n              .use(nib());\n\n          return stylObj;\n        }\n      });\n    },\n\n    /**\n     * Process widget stylus\n     * @param str\n     * @param cb\n     */\n\n    getWidgetCSS: function (str, cb) {\n      getStylusObject(str).render(cb);\n    }\n  };\n\n})();","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/lib/config-manager.js":"var fs = require('fs');\nvar path = require('path');\nvar extend = require('xtend');\nvar debug = require('debug')('config-manager');\n\nexports = module.exports = function (configFileName) {\n\n  function readConfigIfExists(fileName) {\n    if (!path.extname(fileName)) {\n      fileName = fileName + '.js';\n    }\n    if (fs.existsSync(fileName)) {\n      return require(fileName);\n    }\n    return {};\n  }\n\n  function readEnv() {\n    var key = 'ATLASBOARD_CONFIG_' + configFileName;\n    debug('ENV key', key);\n    if (process.env[key]) {\n      debug('ENV configuration found for', key);\n      try {\n        var configValue = JSON.parse(process.env[key]);\n        if (typeof configValue === 'object') {\n          return JSON.parse(process.env[key]);\n        } else {\n          throw 'ENV configuration key ' + key + ' could not be serialized into an object: ' + process.env[key];\n        }\n      } catch (e) {\n        throw 'ENV configuration key ' + key + ' contains invalid JSON: ' + process.env[key];\n      }\n    }\n  }\n\n  var localConfigFilePath = path.join(process.cwd(), 'config', configFileName);\n  var atlasboardConfigFilePath = path.join(__dirname, '../config/', configFileName);\n\n  return extend(\n      readConfigIfExists(atlasboardConfigFilePath),\n      readConfigIfExists(localConfigFilePath),\n      readEnv()\n  );\n};","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/lib/path-resolver.js":"var path = require('path');\n\nfunction getFromRootPath(root, args){\n  Array.prototype.splice.call(args, 0, 0, root);\n  return path.join.apply(null, args);\n}\n\nmodule.exports = {\n  fromAtlasboard: function () {\n    return getFromRootPath(__dirname, arguments);\n  },\n\n  fromLocalWallboard: function () {\n    return getFromRootPath(process.cwd(), arguments);\n  }\n};","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/config/theming.js":"module.exports = {\n  theme: 'default'\n};\n","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/lib/webapp/routes.js":"var path = require('path');\nvar webLogic = require('./logic');\nvar widgetRoutes = require('./routes/widget');\nvar dashboardRoutes = require('./routes/dashboard');\nvar configManager = require('../config-manager');\n\nmodule.exports = function (app, packagesPath) {\n\n  var wallboardAssetsFolder = path.join(process.cwd(), \"assets\");\n\n  // -----------------------------------------\n  //  Log\n  // -----------------------------------------\n  app.route(\"/log\")\n      .get(function (req, res) {\n        if (configManager('logging').liveLoggingWebAccess) {\n          webLogic.log(req, res);\n        }\n        else {\n          res.status(403).end('Live logging it disabled. It must be enabled in the \"logging\" configuration file');\n        }\n      });\n\n  // -----------------------------------------\n  //  Resources for specific widget\n  // -----------------------------------------\n  app.route(\"/widgets/resources\")\n      .get(function (req, res) {\n        widgetRoutes.renderWidgetResource(path.join(process.cwd(), 'packages'), req.query.resource, req, res);\n      });\n\n  // -----------------------------------------\n  //  JS for a specific widget\n  // -----------------------------------------\n  app.route(\"/widgets/:widget/js\")\n      .get(function (req, res) {\n        widgetRoutes.renderJsWidget(packagesPath, req.params.widget, req, res);\n      });\n\n  // -----------------------------------------\n  //  HTML and CSS for a specific widget\n  // -----------------------------------------\n  app.route(\"/widgets/:widget\")\n      .get(function (req, res) {\n        widgetRoutes.renderHtmlWidget(packagesPath, req.params.widget, req, res);\n      });\n\n  // -----------------------------------------\n  //  Dashboard\n  // -----------------------------------------\n  app.route(\"/:dashboard\")\n      .get(function (req, res) {\n        dashboardRoutes.renderDashboard(packagesPath, req.params.dashboard, req, res);\n      });\n\n  // -----------------------------------------\n  //  Dashboard JS\n  // -----------------------------------------\n  app.route(\"/:dashboard/js\")\n      .get(function (req, res) {\n        webLogic.renderJsDashboard(packagesPath, wallboardAssetsFolder, req.params.dashboard, req, res);\n      });\n\n  // -----------------------------------------\n  // List all available dashboards\n  // -----------------------------------------\n  app.route(\"/\")\n      .get(function (req, res) {\n        dashboardRoutes.listAllDashboards(packagesPath, req, res);\n      });\n\n};","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/lib/webapp/logic.js":"var helpers = require('../helpers');\nvar fs = require('fs');\nvar path = require('path');\nvar itemManager = require('../item-manager');\nvar logger = require('../logger')();\nvar async = require('async');\n\nfunction getSafeItemName (itemName){\n  return path.basename(itemName).split('.')[0];\n}\n\nmodule.exports = {\n\n    // ---------------------------------------------------------------\n    // Render custom JS for a dashboard\n    // ---------------------------------------------------------------\n    renderJsDashboard : function (packagesPath, wallboardAssetsFolder, dashboardName, req, res){\n\n      function pipeCustomJSFileNameToResponse (fileName, cb){\n        var assetFullPath = path.join(wallboardAssetsFolder, '/javascripts/', fileName);\n        fs.readFile(assetFullPath, function(err, fileContent) {\n          if (err) {\n            logger.error(assetFullPath + \" not found\");\n          }\n          else {\n            res.write(fileContent + \"\\n\\n\");\n          }\n          cb(null);\n        });\n      }\n\n      dashboardName = getSafeItemName(dashboardName);\n      itemManager.getFirst(packagesPath, dashboardName, \"dashboards\", \".json\", function(err, dashboardPath){\n        if (err || !dashboardPath){\n          return res.status(err ? 400 : 404).send(err ? err : \"Trying to render dashboard \" +\n              dashboardName + \", but couldn't find any dashboard in the packages folder\");\n        }\n        helpers.readJSONFile(dashboardPath, function(err, dashboardJSON){\n          if (err){\n            return res.status(400).send(\"Error reading dashboard\");\n          } else{\n            res.type(\"application/javascript\");\n            async.eachSeries((dashboardJSON.layout.customJS || []), pipeCustomJSFileNameToResponse, function(){\n              res.end();\n            });\n          }\n        });\n      });\n    },\n\n    log : function (req, res){\n      res.render(path.join(__dirname, \"../..\", \"templates\", \"dashboard-log.ejs\"));\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/lib/helpers.js":"var fs = require('fs');\nvar path = require('path');\n\nmodule.exports = {\n\n  isPathContainedInRoot : function(pathDir, root){\n    if (typeof root !== 'string' || typeof pathDir !== 'string'){\n      return false;\n    }\n\n    if (pathDir[0] !== \"/\") {\n      pathDir = path.join(process.cwd(), pathDir);\n    }\n    return pathDir.indexOf(root) === 0;\n  },\n\n  //-----------------------------------------\n  // Accepts a list of files or directory names\n  // Returns \"\" if invalid.\n  //-----------------------------------------\n  areValidPathElements : function(paths) {\n\n    function valid(path){\n      if (!path) {\n        return false;\n      }\n\n      var malicius = false;\n      path = path.toString(); //in case it is another type, like number\n\n      if ((path.indexOf(\"/\") !== -1) || (path.indexOf(\"\\\\\") !== -1)) {\n        malicius = true;\n      }\n\n      if (path.indexOf(\"..\") !== -1) {\n        malicius = true;\n      }\n\n      if (path.indexOf('\\0') !== -1) {\n        malicius = true;\n      }\n\n      if (malicius){\n        console.log(\"Malicious path detected: %s\", path);\n        return false;\n      }\n      else {\n        return true;\n      }\n    }\n\n    paths = Array.isArray(paths) ? paths : [paths];\n    return paths.every(valid);\n  },\n\n  getRndInt: function (min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  },\n\n  readJSONFile: function (dashboardPath, cb) {\n    fs.readFile(dashboardPath, function read(err, data){\n      if (err) { return cb (err); }\n      try {\n        cb(null, JSON.parse(data));\n      } catch(e){\n        cb(e);\n      }\n    });\n  },\n\n  getJSONFromFile: function (path, defaultValue, warnIfFileNotExists, warnIfFileIsInvalid){\n    try {\n      if (!fs.existsSync(path)){\n        if (warnIfFileNotExists) {\n          warnIfFileNotExists(path);\n        }\n        return defaultValue;\n      }\n      return JSON.parse(fs.readFileSync(path));\n    }\n    catch (e){\n      if (warnIfFileIsInvalid) {\n        warnIfFileIsInvalid(path, e);\n      }\n      return defaultValue;\n    }\n  }\n};","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/lib/item-manager.js":"var fs = require('fs');\nvar path = require('path');\nvar async = require('async');\nvar _ = require('underscore');\nvar helpers = require('./helpers');\nvar logger = require('./logger')();\n\n/**\n * Filters will be applied to a certain type to decide if that\n * item should be included in the list to be returned.\n * You can match extensions, do sanity checks (valid JSON), etc.\n */\n\nvar filters = {\n  \"dashboards\": function (dashboardPath) {\n    try {\n      var contentJSON = JSON.parse(fs.readFileSync(dashboardPath));\n      return (contentJSON.enabled !== false);\n    }\n    catch (e) {\n      logger.error('## ERROR ## ' + dashboardPath + ' has an invalid format or file doesn\\'t exist\\n');\n      return false;\n    }\n  }\n};\n\nmodule.exports = {\n\n  /**\n   * Returns relative path to packages path based on item type.\n   * The main purpose of this function is to be able to handle the different way\n   * widgets and jobs paths are resolved compared to the way dashboards paths are.\n   *\n   * @param {string} name item name to match. i.e: widget1\n   * @param {string} itemType item type in plural. ('dashboards', 'jobs', 'widgets')\n   * @param {string} extension : file extension\n   *\n   * @return {string} relative path to item: jobs/job1/job1.js\n   */\n\n  resolveLocation: function (name, itemType, extension) {\n    var useDirectoryLevel = ((itemType === \"widgets\") || (itemType === \"jobs\"));\n    if (useDirectoryLevel) {\n      // jobs/job1/job1.js\n      return path.join(itemType, name, name + extension);\n    }\n    else {\n      // dashboards/dashboard.json\n      return path.join(itemType, name + extension);\n    }\n  },\n\n  /**\n   * Get the items that match the particular filter.\n   *\n   * @param {[string]} items : list of file paths\n   * @param {string} name item name to match. It can be namespaced. i.e: atlassian#widget1, widget1\n   * @param {string} itemType item type in plural. ('dashboards', 'jobs', 'widgets')\n   * @param {string} extension : filter result by extension\n   */\n\n  resolveCandidates: function (items, name, itemType, extension) {\n    var searchCriteria = \"\";\n    if (name.indexOf(\"#\") > -1) {\n      var packageName = name.split(\"#\")[0];\n      var itemParsedName = name.split(\"#\")[1];\n      // package/jobs/job1/job1.js\n      searchCriteria = path.join(packageName, this.resolveLocation(itemParsedName, itemType, extension));\n    }\n    else {\n      // jobs/job1/job1.js\n      searchCriteria = this.resolveLocation(name, itemType, extension);\n    }\n\n    searchCriteria = path.sep + searchCriteria;\n\n    return items.filter(function (item) {\n      return item.indexOf(searchCriteria) > -1;\n    });\n  },\n\n  /**\n   * Return first candidate found matching name, type and extension\n   *\n   * @param {[string]} packagesPath : list of directories to find packages in.\n   * @param {string} itemName item name to match. It can be namespaced. i.e: atlassian#widget1, widget1\n   * @param {string} itemType item type in plural. ('dashboards', 'jobs', 'widgets')\n   * @param {string} extension : filter result by extension\n   */\n\n  getFirst: function (packagesPath, itemName, itemType, extension, callback) {\n    var thiz = this;\n    this.get(packagesPath, itemType, extension, function (err, items) {\n      if (err) {\n        return callback(err);\n      }\n\n      var candidates = thiz.resolveCandidates(items, itemName, itemType, extension);\n      callback(null, candidates.length ? candidates[0] : null);\n    });\n  },\n\n\n  /**\n   * Return list of items found in any package within packagesPath\n   *\n   * @param {[string]} packagesPath : list of directories to find packages in.\n   * @param {string} itemType item type in plural. ('dashboards', 'jobs', 'widgets')\n   * @param {string} extension : filter result by extension\n   */\n\n  get: function (packagesPath, itemType, extension, callback) {\n    this.getByPackage(packagesPath, itemType, extension, function (err, results) {\n      if (err) {\n        return callback(err);\n      }\n      var items = [];\n      results.forEach(function (package) {\n        items = items.concat(package.items);\n      });\n      callback(null, items);\n    });\n  },\n\n  /**\n   * Return list of items found in any package within packagesPath\n   * Items are returned separated by package\n   *\n   * @param {[string]} packagesPath : list of directories to find packages in.\n   * @param {string} itemType item type in plural. ('dashboards', 'jobs', 'widgets')\n   * @param {string} extension : filter result by extension\n   */\n\n  getByPackage: function (packagesPath, itemType, extension, callback) {\n\n    if (!Array.isArray(packagesPath)) {\n      packagesPath = [packagesPath];\n    }\n\n    function readItemsFromPackageDir(dir, cb) {\n      var package = {dir: dir};\n\n      var itemDir = path.join(dir, itemType);\n      if (!fs.existsSync(itemDir)) {\n        package.items = [];\n        return cb(null, package);\n      }\n\n      // this functions parses:\n      // - packages/default/<itemType>/*\n      // - packages/otherpackages/<itemType>/*\n      // for dashboards, or:\n      // - packages/default/<itemType>/*/*.js\n      // - packages/otherpackages/<itemType>/*/*.js\n      // for jobs and widgets\n      fs.readdir(itemDir, function (err, items) {\n        if (err) {\n          return cb(err);\n        }\n\n        var selectedItems = [];\n        items.forEach(function (item_name) {\n          var item = path.join(itemDir, item_name);\n          var stat = fs.statSync(item);\n          if (stat.isDirectory()) {\n            // /job/job1/job1.js\n            item = path.join(item, item_name + extension);\n          }\n\n          if (path.extname(item) === extension) {\n            if (fs.existsSync(item)) {\n              selectedItems.push(item);\n            }\n          }\n        });\n\n        if (filters[itemType]) { // change to use custom filters for itemType\n          selectedItems = selectedItems.filter(filters[itemType]);\n        }\n\n        package.items = selectedItems;\n        return cb(null, package);\n      });\n    }\n\n\n    // this function read all the packages from the provided directory packagesPath:\n    // - packages/default/*\n    // - packages/otherpackages/*\n    // and calls readItemsFromPackageDir for every one of them\n\n    function fillPackages(packagesPath, cb) {\n      fs.readdir(packagesPath, function (err, allPackagesDir) {\n        if (err) {\n          return cb(err);\n        }\n\n        // convert to absolute path\n        allPackagesDir = allPackagesDir.map(function (partialDir) {\n          return path.join(packagesPath, partialDir);\n        });\n\n        // get only valid directories\n        allPackagesDir = allPackagesDir.filter(function (dir) {\n          return fs.statSync(dir).isDirectory();\n        });\n\n        // read items from every package and flatten results\n        async.map(allPackagesDir, readItemsFromPackageDir, function (err, results) {\n          if (err) {\n            return cb(err);\n          }\n          cb(null, _.flatten(results));\n        });\n      });\n    }\n\n    // process all package paths\n    async.map(packagesPath.filter(fs.existsSync), fillPackages, function (err, results) {\n      if (err) {\n        return callback(err);\n      }\n      callback(null, _.flatten(results));\n    });\n  }\n};","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/lib/logger.js":"var tracer = require('tracer');\nvar configManager = require('./config-manager');\n\nvar config = configManager('logging');\n\nmodule.exports = function (jobWorker, io) { //jobWorker and socket.io instance are optional\n\n  var loggerConfig = config.logger || {};\n\n  var prefix = jobWorker ? ('[dashboard: ' + jobWorker.dashboard_name + '] [job: ' + jobWorker.job_name + '] ') : '';\n\n  loggerConfig.transport = function (data) {\n    var logText = prefix + data.output;\n    console.log(logText);\n    if (io) {\n      io.emit('server', {type: data.level, msg: logText});\n    }\n  };\n\n  return tracer.colorConsole(loggerConfig);\n};","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/config/logging.js":"module.exports = {\n\n  \"liveLoggingWebAccess\": false, // disabled by default for security reasons\n\n  \"morgan\": 'dev', // settings for express's logging: https://www.npmjs.com/package/morgan\n\n  /**\n   * https://www.npmjs.com/package/tracer\n   */\n\n  \"logger\": {\n\n    \"format\": [\n      \"{{timestamp}} <{{title}}> {{message}} ({{file}})\",\n      {\n        // error template\n        \"error\": \"{{timestamp}} <{{title}}> {{message}} (in {{file}}:{{line}})\\nCall Stack:\\n{{stack}}\"\n      }\n    ],\n    \"dateformat\": \"HH:MM:ss.L\",\n    \"level\": 3\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/lib/webapp/routes/widget.js":"var fs = require('fs');\nvar path = require('path');\nvar stylus = require('../../stylus');\nvar cssModule = require('css');\nvar itemManager = require('../../item-manager');\nvar logger = require('../../logger')();\n\nfunction getSafeItemName (itemName){\n  return path.basename(itemName).split('.')[0];\n}\n\n// TODO: move namespacing processing to a separate module\nfunction addNamespacesCSSToResponse(css, namespace, res) {\n  res.write(\"<style>\");\n  addNamespace(css, res, namespace);\n  res.write(\"</style>\");\n}\n\nfunction addNamespace (css, res, widgetNamespace){\n  function namespaceRulesAST (rules) {\n    rules.forEach(function (rule) {\n      if (rule.selectors) {\n        rule.selectors = rule.selectors.map(function (selector) {\n          if (selector === '@font-face') {\n            return selector;\n          }\n          // it is important to set the right specificity to widget rules can precede the default ones\n          return '#widgets-container > ul > li[data-widget-id=\"' + widgetNamespace + '\"] ' + selector;\n        });\n      }\n      // Handle rules within media queries\n      if (rule.rules) {\n        namespaceRulesAST(rule.rules);\n      }\n    });\n  }\n\n  if (css) {\n    try {\n      var cssAST = cssModule.parse(css.toString());\n      namespaceRulesAST(cssAST.stylesheet.rules);\n      res.write(cssModule.stringify(cssAST));\n    } catch (e) {\n      logger.error(e);\n    }\n  }\n}\n\nmodule.exports = {\n\n    // ---------------------------------------------------------------\n    // Render specific resource for a widget\n    // - resource format: <package>/<widget>/<resource>\n    //   ex: atlassian/blockers/icon.png\n    // ---------------------------------------------------------------\n    renderWidgetResource: function (localPackagesPath, resource, req, res){\n      if (!resource){\n        return res.status(400).send('resource id not specified');\n      }\n      //sanitization\n      var input = resource.split('/');\n      if (input.length !== 3) {\n        return res.status(400).send('bad input');\n      }\n      var packageName = input[0];\n      var widgetName = input[1];\n      var resourceName = input[2];\n\n      //TODO: add extra sanitization\n      var resourcePath = path.join(localPackagesPath, packageName, 'widgets', widgetName, resourceName);\n      if (fs.existsSync(resourcePath)){\n        res.sendFile(resourcePath);\n      }\n      else {\n        return res.status(404).send('resource not found');\n      }\n    },\n\n    // ---------------------------------------------------------------\n    // Render JS for a specific widget\n    // ---------------------------------------------------------------\n    renderJsWidget: function (packagesPath, widgetName, req, res){\n      res.type(\"application/javascript\");\n      widgetName = getSafeItemName(widgetName);\n      itemManager.getFirst(packagesPath, widgetName, \"widgets\", \".js\", function(err, jsFile){\n        if (err || !jsFile){\n          var msg = err ? err : 'JS file not found for widget ' + widgetName;\n          logger.error(msg)\n          res.status(400).send(\"Error rendering widget: \" + msg);\n        } else {\n          res.sendFile(jsFile);\n        }\n      });\n    },\n\n    // ---------------------------------------------------------------\n    // Render HTML and styles (CSS/Stylus)\n    // ---------------------------------------------------------------\n    renderHtmlWidget : function (packagesPath, widgetName, req, res){\n\n      widgetName = getSafeItemName(widgetName);\n\n      function getFileContents (extension, cb){\n        itemManager.getFirst(packagesPath, widgetName, \"widgets\", extension, function (err, path) {\n          if (err || !path) {\n            return cb(err ? err : 'File does not exist');\n          }\n          fs.readFile(path, 'utf-8', cb);\n        });\n      }\n\n      function loadHTML (res, cb) {\n        getFileContents(\".html\", function (err, html) {\n          if (!err && html) {\n            res.write(html);\n          }\n          cb(err);\n        });\n      }\n\n      function loadCSSIfPresent (res, cb){\n        getFileContents(\".css\", function(err, css){\n          if (!err && css) {\n            addNamespacesCSSToResponse(css, widgetName, res);\n          }\n          cb(err);\n        });\n      }\n\n      function loadStylusIfPresent(res, cb) {\n        getFileContents(\".styl\", function(err, stylusContent){\n          if (!err && stylusContent) {\n            stylus.getWidgetCSS(stylusContent, function(err, css){\n              if (!err) {\n                addNamespacesCSSToResponse(css, widgetName, res);\n              } else {\n                logger.error(err);\n              }\n              cb(err);\n            });\n          } else {\n            cb(err);\n          }\n        });\n      }\n\n      res.type(\"text/html\");\n\n      loadStylusIfPresent(res, function(){\n        loadCSSIfPresent(res, function(){\n          loadHTML(res, function(err){\n            if (err) {\n              res.status(500).send(\"Error rendering widget: \" + err);\n            } else {\n              res.end();\n            }\n          });\n        });\n      });\n    },\n\n    log : function (req, res){\n      res.render(path.join(__dirname, \"../..\", \"templates\", \"dashboard-log.ejs\"));\n    },\n\n    // For testing only\n    _addNamespace: addNamespace\n};\n","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/lib/webapp/routes/dashboard.js":"var path = require('path');\nvar async = require('async');\nvar helpers = require('../../helpers');\nvar templateManager = require('../../template-manager');\nvar itemManager = require('../../item-manager');\n\nfunction getSafeItemName(itemName) {\n  return path.basename(itemName).split('.')[0];\n}\n\nfunction readDashboardJSON(dashboardPath, cb) {\n  helpers.readJSONFile(dashboardPath, function (err, dashboard) {\n    if (err) {\n      console.error('Error reading dashboard: ', dashboardPath);\n      return cb(err);\n    }\n    dashboard.dashboardName = path.basename(dashboardPath, '.json');\n    dashboard.friendlyDashboardName = (typeof dashboard.title === 'string') ? dashboard.title :\n        dashboard.dashboardName.replace(/-/g, ' ').replace(/_/g, ' ');\n    cb(null, dashboard);\n  });\n}\n\nmodule.exports = {\n\n  /**\n   * Render dashboard list\n   * @param packagesPath\n   * @param req\n   * @param res\n   */\n\n  listAllDashboards: function (packagesPath, req, res) {\n    itemManager.get(packagesPath, \"dashboards\", \".json\", function (err, dashboardConfigFiles) {\n      if (err) {\n        logger.error(err);\n        return res.status(400).send(\"Error loading dashboards\");\n      }\n      if (dashboardConfigFiles.length === 1) {\n        return res.redirect(\"/\" + getSafeItemName(dashboardConfigFiles[0]));\n      } else {\n        async.map(dashboardConfigFiles, readDashboardJSON, function (err, dashboardJSONs) {\n          if (err) {\n            return res.status(500).send(\"Error reading dashboards\");\n          }\n          templateManager.resolveTemplateLocation('dashboard-list.ejs', function (err, location) {\n            res.render(location, {\n              dashboards: dashboardJSONs.sort(function (a, b) {\n                if ( a.friendlyDashboardName < b.friendlyDashboardName )\n                  return -1;\n                if ( a.friendlyDashboardName > b.friendlyDashboardName )\n                  return 1;\n                return 0;\n              })\n            });\n          });\n        });\n      }\n    });\n  },\n\n\n  /**\n   * Render a specific dashboard\n   * @param packagesPath\n   * @param dashboardName\n   * @param req\n   * @param res\n   */\n\n  renderDashboard: function (packagesPath, dashboardName, req, res) {\n    dashboardName = getSafeItemName(dashboardName);\n    itemManager.getFirst(packagesPath, dashboardName, \"dashboards\", \".json\", function (err, dashboardPath) {\n      if (err || !dashboardPath) {\n        var statusCode = err ? 400 : 404;\n        return res.status(statusCode).send(err ? err : \"Trying to render the dashboard '\" +\n        dashboardName + \"', but couldn't find a valid dashboard with that name. \" +\n        \"If the dashboard exists, is it a valid json file? Please check the console for error messages\");\n      }\n      helpers.readJSONFile(dashboardPath, function (err, dashboardJSON) {\n        if (err) {\n          return res.status(400).send(\"Invalid dashboard config file\");\n        }\n        templateManager.resolveTemplateLocation(\"dashboard.ejs\", function (err, location) {\n          res.render(location, {\n            dashboardName: dashboardName,\n            dashboardConfig: dashboardJSON\n          });\n        });\n      });\n    });\n  }\n};","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/lib/template-manager.js":"var path = require('path');\nvar fs = require('fs');\n\nexports = module.exports = (function(){\n\n  return {\n\n    /**\n     * Resolve the appropriate template location based on the template name.\n     * If the template exists in the wallboard directory, it will return that.\n     * Otherwise it will return the default one from the Atlasboard directory.\n     * @param {string} fileName\n     * @param {function} cb\n     */\n    resolveTemplateLocation : function(fileName, cb) {\n      var localWallboardLocation = path.join(process.cwd(), \"templates\", fileName);\n      var defaultAtlasboardLocation = path.join(__dirname, \"../templates\", fileName);\n      fs.exists(localWallboardLocation, function(exists){\n        if (exists) {\n          cb(null, localWallboardLocation);\n        }\n        else {\n          cb(null, defaultAtlasboardLocation);\n        }\n      });\n    }\n  };\n\n})();","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/lib/job-initialiser.js":"var jobsManager = require('./job-manager');\nvar configManager = require('./config-manager');\nvar loadGlobalAuth = require('./global-auth');\nvar EventQueue = require(\"./event-queue\");\nvar Scheduler = require(\"./scheduler\");\nvar jobDependencyManager = require('./job-dependencies/loader.js');\nvar logger = require('./logger')();\n\nexports = module.exports = (function () {\n\n  function init(options, cb) {\n\n    jobsManager.getJobs(options, function (err, jobWorkers) {\n      if (err) {\n        return cb(err);\n      }\n\n      var globalAuth = loadGlobalAuth(configManager('auth').authenticationFilePath);\n\n      if (!jobWorkers.length) {\n        logger.warn(\"No jobs found matching the current configuration and filters\");\n      }\n      else {\n        var eventQueue = new EventQueue(options.deps.io);\n        jobWorkers.forEach(function (jobWorker, index) {\n\n          // unique id for this widget in the wallboard\n          jobWorker.id = jobWorker.dashboard_name + '-' +\n              (jobWorker.widget_item.r || jobWorker.widget_item.row) + '-' +\n              (jobWorker.widget_item.c || jobWorker.widget_item.col);\n\n          jobWorker.pushUpdate = function (data) {\n            eventQueue.send(jobWorker.id, data);\n          };\n\n          // add security info\n          jobWorker.config.globalAuth = globalAuth;\n\n          if (jobWorker.widget_item.enabled !== false) {\n\n            jobDependencyManager.fillDependencies(jobWorker, options.deps);\n\n            if (jobWorker.onInit) {\n              jobWorker.onInit.call(jobWorker, jobWorker.config, jobWorker.dependencies);\n            }\n\n            if (jobWorker.onRun) {\n              setTimeout(function () {\n                var scheduler = new Scheduler(jobWorker);\n                scheduler.start();\n              }, index * 1500); // avoid a concurrency peak on startup\n            }\n          }\n          else { // job is disabled\n            jobWorker.pushUpdate({error: 'disabled'});\n          }\n\n        });\n      }\n      return cb();\n    });\n  }\n\n  return {\n    init: init\n  }\n\n})();","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/lib/job-manager.js":"var fs = require('fs');\nvar path = require('path');\nvar extend = require('xtend');\nvar itemManager = require('./item-manager');\nvar logger = require('./logger')();\n\n/**\n * Return a particular dashboard object\n *\n * @param  {string} dashboardFilePath dashboard path\n * @return {object} dashboard object\n */\n\nfunction readDashboard(dashboardFilePath) {\n  var dashboardConfig = JSON.parse(fs.readFileSync(dashboardFilePath));\n\n  if (!dashboardConfig.layout) {\n    throw('No layout field found in ' + dashboardFilePath);\n  }\n\n  if (!dashboardConfig.layout.widgets) {\n    throw('No widgets field found in ' + dashboardFilePath);\n  }\n  return dashboardConfig;\n}\n\n/**\n * Returns true if dashboard matches a particular regex filter\n *\n * @param  {string} dashboardFullPath dashboard full path\n * @param  {string} filter regex\n * @return {boolean}\n */\n\nfunction matchDashboardFilter (dashboardFullPath, filter){\n  var dashboardName = path.basename(dashboardFullPath);\n  return dashboardName.match(filter);\n}\n\n/**\n * Returns true if job matches a particular regex filter\n *\n * @param  {string} jobName job name\n * @param  {string} filter regex\n * @return {boolean}\n */\n\nfunction matchJobFilter (jobName, filter){\n  return jobName.match(filter);\n}\n\n/**\n * Process all jobs from a dashboard\n *\n * @param  {array} allJobs all available jobs\n * @param  {string} dashboardName dashboard name\n * @param  {object} dashboardConfig dashboard config\n * @param  {object} filters filters, if any\n * @return {array} related jobs\n */\nfunction processDashboard (allJobs, dashboardName, dashboardConfig, filters){\n  var jobs = [];\n  for (var i = 0, l = dashboardConfig.layout.widgets.length; i < l ;  i++) {\n    var jobItem = dashboardConfig.layout.widgets[i];\n    if (jobItem.job) { // widgets can run without a job, displaying just static html.\n      if (filters.jobFilter){\n        if (!matchJobFilter(jobItem.job, filters.jobFilter)){\n          continue;\n        }\n      }\n\n      var candidateJobs = itemManager.resolveCandidates(allJobs, jobItem.job, \"jobs\", \".js\");\n      if (!candidateJobs.length){\n        throw \"  ERROR RESOLVING JOB \" +\n              \"\\n   No job file found for \\\"\" + jobItem.job + \"\\\" in \" + dashboardName +\n              \"\\n   Did you pulled all the packages dependencies? (they are git submodules)\" +\n              \"\\n\\n   $ git submodule init\"+\n              \"\\n   $ git submodule update\\n\";\n      }\n\n      var job = {\n        'dashboard_name' : path.basename(dashboardName, '.json'),\n        'widget_item' : jobItem,\n        'job_name' : jobItem.job,\n        'configKey' : jobItem.config\n      };\n\n      var jobRequire = require(candidateJobs[0]);\n      if (typeof jobRequire === 'function') {\n        job.onRun = jobRequire;\n      } else {\n        job.onRun = jobRequire.onRun || function(){};\n        job.onInit = jobRequire.onInit || function(){};\n      }\n\n      jobs.push(job);\n    }\n  }\n  return jobs;\n}\n\n\nmodule.exports = {\n\n  /**\n   * Return the jobs for all available dashboards in all the packages\n   *\n   * @param  {object}   options  options object\n   * @param  {Function} callback\n   */\n\n  getJobs : function (options, callback) {\n\n    var packagesPath = options.packagesPath;\n    var filters = options.filters || {};\n\n    var configPath = path.join(options.configPath,\"/dashboard_common.json\");\n    var generalDashboardConfig = {};\n\n    var jobs = [];\n\n    // ----------------------------------------------\n    // general config is optional, but if it exists it needs to be a valid file\n    // ----------------------------------------------\n    if (fs.existsSync(configPath)){\n      try{\n        generalDashboardConfig = JSON.parse(fs.readFileSync(configPath)).config;\n        if (!generalDashboardConfig) {\n          throw 'invalid format. config property not found';\n        }\n      }\n      catch (e){\n        return callback(\"ERROR reading general config file...\" + configPath);\n      }\n    }\n\n    // ----------------------------------------------\n    // get all dashboards from all packages folder\n    // ----------------------------------------------\n    itemManager.get(packagesPath, \"dashboards\", \".json\", function(err, dashboardConfigFiles){\n      if (err){ return callback(err); }\n\n      // ----------------------------------------------\n      // get all jobs from those packages\n      // ----------------------------------------------\n      itemManager.get(packagesPath, \"jobs\", \".js\", function(err, allJobs){\n        if (err){ return callback(err); }\n\n        for (var d = 0, dl = dashboardConfigFiles.length; d < dl ; d++) {\n          var dashboardName = dashboardConfigFiles[d];\n\n          if (filters.dashboardFilter){\n            if (!matchDashboardFilter(dashboardName, filters.dashboardFilter)){\n              continue;\n            }\n          }\n\n          var dashboardConfig;\n          var dashboardJobs;\n          try {\n            dashboardConfig = readDashboard(dashboardName);\n            dashboardJobs = processDashboard(allJobs, dashboardName, dashboardConfig, filters);\n          }\n          catch (e){\n            return callback (e);\n          }\n\n          // add config to job, extending for the same config key in general config, if any\n          dashboardJobs = dashboardJobs.map(function(job){\n            // Multiple configurations:\n            //  local overrides global\n            //  config n+1 overrides config n\n            if (Array.isArray(job.configKey)) {\n              var configs = job.configKey.map(function(key){\n                return extend(generalDashboardConfig[key], dashboardConfig.config[key]);\n              });\n              job.config = extend.apply(null, configs);\n            } else { // single configuration\n              job.config = extend(generalDashboardConfig[job.configKey], dashboardConfig.config[job.configKey]);\n            }\n\n            return job;\n          });\n\n          jobs = jobs.concat(dashboardJobs);\n        }\n\n        callback(null, jobs);\n      });\n    });\n  }\n};","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/lib/global-auth.js":"\"use strict\";\n\nvar fs = require(\"fs\");\nvar traverse = require(\"traverse\");\nvar generalLogger = require('./logger')();\n\nvar ENV_VAR_REGEX = /\\$\\{([^}]+)\\}/;\n\nmodule.exports = function (file) {\n  var globalAuth = {};\n\n  try {\n    globalAuth = JSON.parse(fs.readFileSync(file));\n  } catch (e) {\n    if (e.code === 'ENOENT') {\n      generalLogger.warn(\"Authentication file not found in \" + file +\n      \". You may want to create your own. You can also define the place where the credential file will be located \" +\n      \" by editing the auth file configuration property 'authenticationFilePath'\");\n    }\n    else {\n      generalLogger.error(\"Error reading \" + file + \". It may contain invalid json format\");\n    }\n    return globalAuth;\n  }\n\n  try {\n    traverse(globalAuth).forEach(function (val) {\n      if (\"string\" === typeof val) {\n        var match, modified;\n        while ((match = ENV_VAR_REGEX.exec(val)) !== null) {\n          var envName = match[1];\n          var envVal = process.env[envName];\n          if (envVal === undefined) {\n            generalLogger.warn(\"Authentication file referenced var ${\" + envName + \"}, which was not present in environment\");\n            envVal = \"\";\n          }\n          val = val.substring(0, match.index) + envVal + val.substring(match.index + match[0].length);\n          modified = true;\n        }\n\n        if (modified === true) {\n          this.update(val);\n        }\n      }\n    });\n  }\n  catch (e) {\n    generalLogger.error(\"Error parsing the auth file \" + file + \" with env variables\");\n  }\n\n  return globalAuth;\n};\n","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/lib/event-queue.js":"/**\n * Event Queue\n *\n * @param io\n * @constructor\n */\n\nfunction EventQueue(io) {\n  this.io = io;\n  this.latestEvents = {};\n  var self = this;\n\n  io.on(\"connection\", function (socket) {\n    socket.on(\"resend\", function (data) {\n      if (self.latestEvents[data]) {\n        socket.emit(data, self.latestEvents[data]);\n      }\n    });\n\n    // broadcast logs\n    socket.on(\"log\", function (data) {\n      socket.broadcast.emit('client', data);\n    });\n  });\n}\n\nexports = module.exports = EventQueue;\n\n/**\n * Send widget data to clients\n * @param id\n * @param data\n */\n\nEventQueue.prototype.send = function (id, data) {\n  this.latestEvents[id] = data;\n  this.io.emit(id, data); // emit to widget\n  this.io.emit('client', {widgetId: id, data: data}); // emit to logger\n};","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/lib/scheduler.js":"/**\n * Job scheduler\n *\n * @param jobWorker\n * @constructor\n */\n\nfunction Scheduler(jobWorker) {\n  this.jobWorker = ensureSafeJobWorkerConfiguration(jobWorker);\n  this.originalInterval = jobWorker.config.interval;\n}\n\nexports = module.exports = Scheduler;\n\n/**\n * Schedules next job execution based on job's interval\n */\n\nScheduler.prototype.scheduleNext = function(){\n  var self = this;\n  setTimeout(function(){\n    self.start();\n  }, this.jobWorker.config.interval);\n};\n\n/**\n * Run job and schedule next\n */\n\nScheduler.prototype.start = function() {\n\n  var self = this;\n  var job = self.jobWorker;\n\n  function handleError(err) {\n\n    job.dependencies.logger.error('executed with errors: ' + err);\n\n    // in case of error retry in one third of the original interval or 1 min, whatever is lower\n    job.config.interval = Math.min(self.originalInterval / 3, 60000);\n\n    // -------------------------------------------------------------\n    // Decide if we hold error notification according to widget config.\n    // if the retryOnErrorTimes property found in config, the error notification\n    // won´t be sent until we reach that number of consecutive errrors.\n    // This will prevent showing too many error when connection to flaky, unreliable\n    // servers.\n    // -------------------------------------------------------------\n    var sendError = true;\n    if (job.firstRun === false) {\n      if (job.config.retryOnErrorTimes) {\n        job.retryOnErrorCounter = job.retryOnErrorCounter || 0;\n        if (job.retryOnErrorCounter <= job.config.retryOnErrorTimes) {\n          job.dependencies.logger.warn('widget with retryOnErrorTimes. attempts: ' +\n              job.retryOnErrorCounter);\n          sendError = false;\n          job.retryOnErrorCounter++;\n        }\n      }\n    }\n    else {\n      // this is the first run for this job so if it fails, we want to inform immediately\n      // since it may be a configuration or dev related problem.\n      job.firstRun = false;\n    }\n\n    if (sendError) {\n      job.pushUpdate({error: err, config: {interval: job.config.interval}});\n    }\n  }\n\n  function handleSuccess(data) {\n    job.retryOnErrorCounter = 0; //reset error counter on success\n    job.dependencies.logger.log('executed OK');\n    job.config.interval = self.originalInterval;\n    if (!data) {\n      data = {};\n    }\n    data.config = {interval: job.config.interval}; // give access to interval to client\n    job.pushUpdate(data);\n  }\n\n  try {\n\n    var cbCalled = false; // job_callback is meant to be executed only once per job run\n\n    function jobCallback (err, data){\n      if (cbCalled) {\n        job.dependencies.logger.warn('WARNING!!!!: job_callback executed more than once for job ' +\n        job.widget_item.job + ' in dashboard ' + job.dashboard_name);\n      }\n      cbCalled = true;\n\n      if (err) {\n        handleError(err);\n      }\n      else {\n        handleSuccess(data);\n      }\n      self.scheduleNext();\n    }\n\n    job.onRun.call(job, job.config, job.dependencies, jobCallback);\n\n  }\n  catch (e) {\n    job.dependencies.logger.error('Uncaught exception executing job: ' + e);\n    handleError(e);\n    self.scheduleNext();\n  }\n};\n\nfunction ensureSafeJobWorkerConfiguration(jobWorker) {\n  if (!jobWorker.config.interval) {\n    jobWorker.config.interval = 60 * 1000; // default to 60 secs if not provided\n  }\n  else if (jobWorker.config.interval < 1000) {\n    jobWorker.config.interval = 1000; // minimum 1 sec\n  }\n\n  return jobWorker;\n}","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/lib/job-dependencies/loader.js":"var path = require('path');\nvar fs = require('fs');\n\nmodule.exports.fillDependencies = function (jobWorker, deps) {\n\n  jobWorker.dependencies = {};\n\n  var dependencyFolders = fs.readdirSync(__dirname);\n  for (var i = dependencyFolders.length - 1; i >= 0; i--) {\n    var folderPath = path.join(__dirname, dependencyFolders[i]);\n    var stat = fs.statSync(folderPath);\n    if (stat.isDirectory()) {\n      try {\n        var depPath = path.join(folderPath, 'dependency.js');\n        jobWorker.dependencies[dependencyFolders[i]] = require(depPath)(jobWorker, deps);\n      }\n      catch (e) {\n        throw 'error resolving dependency ' + dependencyFolders[i] + '. ERROR:' + e;\n      }\n    }\n  }\n\n};","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/gulpfile.js":"var gulp = require('gulp');\nvar plugins = require('gulp-load-plugins')();\nvar eslint = require('gulp-eslint');\nvar watch = require('gulp-watch');\nvar mocha = require('gulp-mocha');\nvar bowerFiles = require('bower-files')({\n  overrides: {\n    gridster: {\n      main: './dist/jquery.gridster.with-extras.js',\n      dependencies: {}\n    },\n    rickshaw: {\n      main: './dist/rickshaw.js',\n      dependencies: {}\n    }\n  }\n});\n\nvar watchForClientJSFiles = ['assets/javascripts/application.js', 'assets/javascripts/plugins/*.js'];\nvar watchForServerJSFiles = ['test/*.js', 'lib/**/*.js'];\n\nvar watch = function () {\n  gulp.watch(watchForClientJSFiles, ['build-client-js']);\n  gulp.watch(watchForServerJSFiles, ['unit']);\n};\n\nvar buildApplicationJS = function () {\n  return gulp.src(watchForClientJSFiles)\n      .pipe(plugins.filter('*.js'))\n      .pipe(plugins.uglify())\n      .pipe(plugins.concat('app.js'))\n      .pipe(gulp.dest('assets/build'));\n};\n\nvar buildBowerJS = function () {\n  return gulp.src(bowerFiles.ext('js').files)\n      .pipe(plugins.filter('*.js'))\n      .pipe(plugins.uglify())\n      .pipe(plugins.concat('vendor.js'))\n      .pipe(gulp.dest('assets/build'));\n};\n\nvar runUnitTests = function () {\n  return gulp.src('test/*.js')\n      .pipe(mocha({reporter: 'list'}));\n};\n\nvar lintJS = function () {\n  return gulp.src([\n    'lib/**/*.js',\n    'assets/javascripts/*.js'\n  ])\n      .pipe(eslint({\n        'rules': {\n          'no-alert': 0,\n          'no-bitwise': 0,\n          'camelcase': 1,\n          'curly': 1,\n          'eqeqeq': 0,\n          'no-eq-null': 0,\n          'guard-for-in': 1,\n          'no-empty': 1,\n          'no-use-before-define': 0,\n          'no-obj-calls': 2,\n          'no-unused-vars': 0,\n          'new-cap': 1,\n          'no-shadow': 0,\n          'strict': 0,\n          'no-invalid-regexp': 2,\n          'comma-dangle': 2,\n          'no-undef': 1,\n          'no-new': 1,\n          'no-extra-semi': 1,\n          'no-debugger': 2,\n          'no-caller': 1,\n          'semi': 1,\n          'quotes': 0,\n          'no-unreachable': 2\n        },\n        'globals': {\n          '$': false\n        },\n        'env': {\n          'node': true\n        }\n      }))\n      .pipe(eslint.format())\n      .pipe(eslint.failOnError());\n};\n\ngulp.task('bower-js', buildBowerJS);\ngulp.task('build-client-js', buildApplicationJS);\ngulp.task('lint', lintJS);\ngulp.task('unit', runUnitTests);\n\ngulp.task('watch', watch);\ngulp.task('default', ['lint', 'unit', 'build-client-js']);","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/config/auth.js":"module.exports = {\n  \"authenticationFilePath\": \"globalAuth.json\"\n};\n","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/lib/hipchat.js":"var API_URL = 'https://api.hipchat.com/';\nvar qstring = require('querystring');\n\nmodule.exports.create = function(options) {\n  var request = options.request || require ('request');\n\n  if (!options.api_key){\n    throw 'api_key required';\n  }\n\n  var errors = {\n    400: 'Bad request. Please check your data',\n    401: 'Unauthorized: API KEY not valid',\n    403: 'You have exceeded the rate limit',\n    404: 'Not found',\n    406: 'You requested an invalid content type',\n    500: 'Server Error',\n    503: 'The method you requested is currently unavailable (due to maintenance or high load'\n  };\n\n  var onResponseBuilder = function (callback) {\n    return function (err, response, body) {\n      if (callback) {\n        var errMsg = null;\n        if (err || !response || response.statusCode != 200) {\n          errMsg = err;\n          if (response && errors[response.statusCode]) {\n            errMsg += ' ' + errors[response.statusCode] + '; ' + body;\n          }\n        }\n        callback(errMsg, response ? response.statusCode : null, body);\n      }\n    };\n  };\n\n  return {\n    /**\n     * Push message to HipChat server\n     * @param roomId id of the room (number)\n     * @param from sender name\n     * @param message body of the message\n     * @param notify should trigger a room notification? values: 1,0\n     * @param callback a callback to be executed when complete\n     */\n    'message' : function (roomId, from, message, notify, callback){\n      var url = API_URL + 'v1/rooms/message?format=json&auth_token=' + options.api_key;\n\n      var data = {\n        'room_id' : roomId,\n        'from' : from,\n        'message' : message,\n        'notify' : notify\n      };\n\n      request.post({\n          url: url,\n          headers:{'content-type': 'application/x-www-form-urlencoded'},\n          body: qstring.stringify(data)\n        }, onResponseBuilder(callback));\n    },\n    /**\n     * Get a room info from hipchat\n     * @param roomId id of the room (number)\n     * @param callback a callback to be executed when complete\n     */\n    'roomInfo' : function (roomId, callback){\n      var url = API_URL + 'v2/room/' + roomId + '?format=json&auth_token=' + options.api_key;\n      request.get({url: url, json:true}, onResponseBuilder(callback));\n    }\n  };\n};","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/lib/cli/cli.js":"#!/usr/bin/env node\nvar commands = require('./commands');\nvar fs = require('fs');\nvar path = require('path');\n\nrequire('colors');\n\nfunction showHelp() {\n  var projectPackageJson = JSON.parse(fs.readFileSync(path.join(__dirname, '../..', 'package.json')));\n  console.log([\n    '\\n  Atlasboard Version ' + projectPackageJson.version.yellow + '\\n',\n    '  usage: atlasboard [' + 'command'.yellow + '] [options]\\n',\n    '  LIST OF AVAILABLE COMMANDS:\\n'\n  ].join('\\n'))\n\n  for (var c in commands) {\n    console.log('  %s: %s. Example: \\n  \\t%s \\n', c.yellow, commands[c].descr, commands[c].example.gray);\n  }\n}\n\nvar args = process.argv; // node, atlasboard, command, args\nvar command = args[2]; // command name\nvar commandArguments = args.slice(3);\n\nif (commands[command]) {\n  commands[command].run(commandArguments, function (err) {\n    if (err) {\n      console.error(typeof err == \"string\" ? ('  ' + err.red): err);\n      process.exit(1);\n    }\n  });\n}\nelse {\n  showHelp();\n}\n","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/lib/cli/commands.js":"var path = require('path');\nvar logicCli = require('./commands-logic');\nvar logger = require('../logger')();\n\nvar DEFAULT_PACKAGE_FOLDER = 'default';\n\nrequire('colors');\n\nmodule.exports = {\n\n  /**\n   * Generates an Atlasboard component\n   *\n   * @params args[0] item type: job, dashboard or widget\n   * @params args[1] item name\n   */\n\n  generate: {\n\n    descr: \"generates a basic component of type widget, dashboard or job\",\n    example: \"atlasboard generate widget mywidget\",\n\n    run: function (args, cb) { // check for the right arguments\n\n           if (args.length < 2) {\n              cb && cb('Missing arguments. Please use \"atlasboard generate widget <mywidget>\"');\n              return;\n           }\n\n           var packageFolder = DEFAULT_PACKAGE_FOLDER;\n\n           var itemType = args[0];\n           var itemName = args[1];\n           if (itemName.indexOf('#') > -1){ //package namespacing\n             packageFolder = itemName.split('#')[0];\n             itemName = itemName.split('#')[1];\n           }\n           return logicCli.generate(process.cwd(), packageFolder, itemType, itemName, function(err){\n             cb && cb(err);\n           });\n         }\n  },\n\n  /**\n   * Creates a new dashboard\n   *\n   * @params args[0] dashboard directory\n   */\n\n  new: {\n\n    descr: \"generates a new dashboard project\",\n    example: \"atlasboard new mywallboard\",\n\n    run: function (args, cb) {\n\n           if (args.length < 1) {\n              cb && cb('Missing arguments. Please use \"atlasboard new <mywallboard>\"');\n              return;\n           }\n           var newDirectory = args[0];\n           var srcDir = path.join(__dirname, \"../..\", \"templates\", \"new-components\", \"project\");\n           var destDir = path.join(process.cwd(), newDirectory);\n           return logicCli.newProject (srcDir, destDir, function(err){\n             if (err){\n               cb && cb(err);\n               return;\n             }\n\n             process.chdir(newDirectory);\n             var childProcess = require('child_process');\n             var child = childProcess.spawn('npm', [\"install\", \"--production\"], {stdio: 'inherit'});\n             console.log ('  Installing npm dependencies...');\n             child.on('error', function () {\n               console.log('\\n  Error installing dependencies. Please run \"npm install\" inside the dashboard directory');\n               cb && cb('Error installing dependencies');\n             });\n             child.on('exit', function () {\n               console.log([\n                 '\\n  SUCCESS !!'.green + '\\n',\n               '  New project \"' +  newDirectory.yellow + '\" successfully created. Now you can:\\n',\n                 ('   1. cd ' + newDirectory).gray,\n               '   2. npm install'.gray,\n               '   3. start your server with `atlasboard start` (or `node start.js`)'.gray,\n               '   4. browse http://localhost:3000'.gray + '\\n',\n               '   Optionally: import the Atlassian package (or any other package) by running:\\n',\n               '   git init'.gray,\n               '   git submodule add https://bitbucket.org/atlassian/atlasboard-atlassian-package packages/atlassian\\n'.gray\n               ].join('\\n'));\n\n               cb && cb();\n             });\n          });\n        }\n  },\n\n  /**\n   * List of all Atlasboard components (widgets or jobs) within all available packages\n   */\n\n  list: {\n\n    descr: \"lists all available components (widgets or jobs) among all packages\",\n    example: \"atlasboard list\",\n\n    run: function (args, cb) {\n\n           function parse(package){\n             console.log('        Package \"' + path.basename(package.dir) + '\":');\n             package.items.forEach(function(item){\n               console.log('          - ' + path.basename(item, '.js').gray);\n             });\n           }\n\n           var packagesLocalFolder = path.join(process.cwd(), \"/packages\");\n           var packagesAtlasboardFolder = path.join(__dirname, \"../../packages\");\n           return logicCli.list([packagesLocalFolder, packagesAtlasboardFolder], function(err, packages){\n             if (err){\n               cb && cb('Error reading package folder');\n               return;\n             }\n\n             packages.forEach(function(package){\n               console.log('Path: ' + package.package + ':\\n');\n               console.log('  - Widgets:'.yellow);\n               package.widgets.forEach(parse);\n\n               console.log('  - Jobs:'.yellow );\n               package.jobs.forEach(parse);\n             });\n             console.log('');\n             cb && cb();\n           });\n         }\n  },\n\n  /**\n   * When run in a project's base directory, starts the AtlasBoard server.\n   *\n   * @params args[0] port (optional)\n   * @params args --jobFilter filter by job (optional)\n   * @params args --dashboardFilter filter by dashboard (optional)\n   */\n\n  start: {\n\n    descr: \"starts AtlasBoard's server\",\n    example: \"atlasboard start 3333                    # runs atlasboard in port 3333\" +\n             \"\\n        atlasboard start --noinstall             # skips npm package install (faster startup)\" +\n             \"\\n        atlasboard start --job myjob             # runs only jobs matching 'myjob'\" +\n             \"\\n        atlasboard start --dashboard \\\\bdash      # loads only dashboards matching \\\\bdash regex\",\n\n    run: function (args, cb) {\n          var port = isNaN(args[0]) ? 3000 : args[0];\n          var options = {port: port, filters: {}, install: true};\n\n          var argsOptimistic = require('optimist')(args).argv;\n\n          if (argsOptimistic.noinstall) {\n            options.install = false;\n          }\n\n          if (argsOptimistic.job) {\n            console.log('Loading jobs matching ' + argsOptimistic.job.yellow + \" only\");\n            options.filters.jobFilter = argsOptimistic.job;\n          }\n\n          if (argsOptimistic.dashboard) {\n            console.log('Loading dashboards matching ' + argsOptimistic.dashboard.yellow + \" only\");\n            options.filters.dashboardFilter = argsOptimistic.dashboard;\n          }\n          console.log('\\nStarting server...'.gray);\n\n          logicCli.start(options, function(err){\n            cb && cb(err);\n          });\n         }\n  },\n\n  /**\n   * Install the packages dependencies\n   */\n\n  install: {\n\n    descr: \"install package dependencies\",\n    example: \"atlasboard install\",\n\n    run: function (args, cb) { // check for the right arguments\n           return logicCli.install({}, function(err){\n             cb && cb(err);\n           });\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/lib/cli/commands-logic.js":"#!/usr/bin/env node\nvar fs = require('fs');\nvar path = require('path');\nvar scaffolding = require('./scaffolding');\nvar itemManager = require('../item-manager');\nvar async = require('async');\nvar _ = require('underscore');\nvar helpers = require('../helpers');\nvar packageDependencyManager = require('../package-dependency-manager');\nvar atlasboard = require('../atlasboard');\n\nrequire('colors');\n\nfunction directoryHasAtlasBoardProject(dir){\n  var requiredItems = [\"packages\", \"package.json\", \"config\"]; //the project should have these items\n  return requiredItems.every(function (item) { return fs.existsSync(path.join(dir, item));});\n}\n\nvar validNewDirectoryExp = /^[a-zA-Z0-9_-]*$/;\n\nmodule.exports = {\n\n  generate: function (projectDir, package, itemType, itemName, callback){\n\n    if (!helpers.areValidPathElements([itemType, itemName])){\n      return callback('invalid input');\n    }\n\n    var templateFolder = path.join(__dirname, \"../..\", \"templates\", \"new-components\");\n\n    //Assert valid parameter usage\n    var itemsToGenerate = [\"widget\", \"dashboard\", \"job\"];\n    if (itemsToGenerate.indexOf(itemType) == -1) {\n      return callback(\"Invalid generator \" + itemType + \"\\nUse one of: \" + itemsToGenerate.join(\", \"));\n    }\n\n    //Assert a project already exists here\n    if (!directoryHasAtlasBoardProject(projectDir)){\n      return callback(\"It seems that no project exists here yet. Please navigate to your project's root directory, or generate one first.\");\n    }\n\n    //Assert name given\n    if (!itemName) {\n      return callback(\"ERROR: No \" + itemType + \" name provided. Please try again with a name after the generate parameter\");\n    }\n\n    //Assert no such item exists there yet\n    var destPackageLocation = path.join(projectDir, \"packages\", package);\n\n    var options = {};\n    var target, src;\n\n    if (itemType === 'dashboard'){ // all dashboards files are stored within the dashboards folder\n      src = path.join(templateFolder, 'dashboard', 'default.json');\n      target = path.join(destPackageLocation, 'dashboards', itemName + '.json');\n    }\n    else {\n\n      src = path.join(templateFolder, itemType);\n      target = path.join(path.join(destPackageLocation, itemType + \"s\"), itemName);\n\n      options = {\n        engine : 'ejs',\n        data : {\n          name: itemName\n        },\n        replace: {\n          \"widget.\": itemName + '.',\n          \"default.js\": itemName + '.js'\n         }\n      };\n    }\n\n    if (fs.existsSync(target)) {\n      return callback (\"ERROR: This \" + itemType + \" already seems to exist at \" + target);\n    }\n\n    console.log(\"\\nCreating new %s at %s...\", itemType, target);\n    scaffolding.scaffold(src, target, options, callback);\n    console.log(\"SUCCESS !!\".green + '\\n');\n  },\n\n  newProject: function(srcDir, destDir, callback) {\n\n    //check for valid directory name\n    var dirName = path.basename(destDir);\n    if (!dirName.match(validNewDirectoryExp)){\n      return callback('Invalid wallboard name');\n    }\n\n    if (!helpers.isPathContainedInRoot(destDir, process.cwd())){\n      return callback('invalid directory');\n    }\n\n    console.log(\"\\n  Generating a new AtlasBoard project at %s...\", destDir.gray);\n\n    var parentDir = path.dirname(destDir);\n\n    if (directoryHasAtlasBoardProject(parentDir)){\n      return callback(\"You can not create an atlasboard inside a directory containing an atlasboard (at least we think you shouldn't)\");\n    }\n\n    if (fs.existsSync(destDir)) {\n      return callback(\"There is already a directory here called \" + destDir + \". Please choose a new name.\");\n    }\n\n    console.log(\"  Creating new wallboard ...\");\n    var options = {\n      engine : 'ejs',\n      data : {\n        name : dirName\n      }\n    };\n    scaffolding.scaffold(srcDir, destDir, options, callback);\n  },\n\n  list : function(packagesPath, callback){\n    packagesPath = Array.isArray(packagesPath) ? packagesPath : [packagesPath];\n    async.map(_.unique(packagesPath), function(packagePath, cb){\n      var list = { package : packagePath};\n      itemManager.getByPackage(packagePath, \"widgets\", \".js\", function(err, packagesWidgetList){\n        if (err) {return cb(err);}\n        list.widgets = packagesWidgetList;\n        itemManager.getByPackage(packagePath, \"jobs\", \".js\", function(err, packagesJobList){\n          if (err) {return cb(err);}\n          list.jobs = packagesJobList;\n          cb(null, (list.widgets.length && list.jobs.length) ? list : null);\n        });\n      });\n    }, function (err, results){\n      callback(err, _.compact(results));\n    });\n  },\n\n  start : function(options, callback){\n    if (!directoryHasAtlasBoardProject(process.cwd())){\n      return callback(\"I couldn't find a valid AtlasBoard dashboard. Try generating one with `atlasboard new DASHBOARDNAME`.\");\n    }\n\n    // start AtlasBoard\n    atlasboard(options, callback);\n  },\n\n  install : function(options, callback) {\n    var packagesLocalFolder = path.join(process.cwd(), \"/packages\");\n    packageDependencyManager.installDependencies([packagesLocalFolder], callback);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-atlasboard/node_modules/atlasboard/lib/cli/scaffolding.js":"var ejs = require('ejs');\nvar path = require('path');\nvar fs = require('fs');\nvar mkdirp = require('mkdirp');\nvar debug = require('debug')('scaffolding');\n\nmodule.exports = {\n\n  /**\n   * Folder scaffolding\n   * @param  {string}   templateSourceFolder Templating source\n   * @param  {string}   destinationFolder    Destination folder\n   * @param  {object}   options (optional)\n   *                    options.engine : templating engine ('ejs')\n   *                    options.replace : object with replacement options\n   * @param  {Function} cb                   Callback (err, null);\n   */\n  scaffold : function (templateSourceFolder, destinationFolder, options, cb){\n    \n    if (!cb) { // options parameter is optional\n      cb = options;\n      options = {};\n    }\n\n    function applyReplacements(fileName, replacements){\n      for (var item in replacements) {\n        var replace = replacements[item];\n        if (fileName.indexOf(item) > -1) {\n          fileName = fileName.replace(item, replace);\n          break;\n        }\n      }\n      return fileName;\n    }\n\n    // based on http://stackoverflow.com/questions/13786160/copy-folder-recursively-in-node-js\n    var copyRecursiveSync = function(src, dest) {\n      var exists = fs.existsSync(src);\n      var stats = exists && fs.statSync(src);\n      var isDirectory = exists && stats.isDirectory();\n      if (exists && isDirectory) {\n        debug('creating directory', dest);\n        fs.mkdirSync(dest);\n        fs.readdirSync(src).forEach(function(childItemName) {\n          debug('copying from', src, 'into', dest, 'File:', childItemName);\n          copyRecursiveSync(path.join(src, childItemName),\n                            path.join(dest, childItemName));\n        });\n      } else {\n        var destinationFile =  applyReplacements(dest, options.replace || {});\n        var output = fs.readFileSync(src).toString();\n        if (options.engine === 'ejs') {\n          output = ejs.render(output, options.data);\n        }\n        fs.writeFileSync(destinationFile, output);\n      }\n    };\n\n    mkdirp(path.dirname(destinationFolder), function(err){\n      if (err) {\n        return cb(err);\n      }\n\n      copyRecursiveSync(templateSourceFolder, destinationFolder);\n      cb();\n    });\n  }\n\n};"}